
plugins {
    id 'org.springframework.boot' version "${SpringBootVersion}"
    id 'io.spring.dependency-management' version "${ManagementVersion}"
    id "com.ewerk.gradle.plugins.querydsl" version "${QuerydslVersion}"
    id 'java'
    id 'com.bmuschko.docker-remote-api' version "${DockerRemoteApiVersion}"
}

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

task createDockerfile(type: Dockerfile) {
    dependsOn build
    from 'java:8'
    addFile("demo.jar" , "./demo.jar")
    entryPoint('java')
    defaultCommand('-XX:MaxMetaspaceSize=512m', '-XX:MetaspaceSize=256m', '-jar', 'demo.jar')
}

task buildImage(type: DockerBuildImage) {
    dependsOn createDockerfile
    images.add('jkpark1191517/java_app:latest')
}

task pushImage(type: DockerPushImage) {
    dependsOn buildImage
    images.set(buildImage.images)
    registryCredentials {
        username = dockerUser
        password = dockerPassword
        email = dockerEmail
    }
}



buildDir = 'target'

bootJar {
    archiveFileName = 'demo.jar'
    destinationDirectory = file("${project.buildDir}/docker")
    enabled = true
}

group = 'com.app'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '8'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc:2.2.4.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.1'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.apache.commons:commons-lang3:3.9'
//    implementation 'org.apache.commons:commons-text:1.6'

//    compile 'org.apache.commons:commons-lang3:3.9'

    // spring test
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    // junit version 5
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'

    implementation "com.querydsl:querydsl-jpa"
    implementation "com.querydsl:querydsl-apt"
    implementation 'org.jetbrains:annotations:15.0'
    implementation 'org.jetbrains:annotations:15.0'

}

test {
    useJUnitPlatform()
}

// ???
test.ignoreFailures = true

// Qclass src
def querydslSrcDir = 'src/main/java/generated'

querydsl {
    library = "com.querydsl:querydsl-apt:4.2.1"
    jpa = true
    querydslSourcesDir = querydslSrcDir
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', querydslSrcDir]
        }
    }
}

clean {
    delete file(querydslSrcDir)
}

